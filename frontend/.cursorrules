# Frontend Development Rules - RMApp

## Core Technologies
- **React 18** - Use latest React features and hooks
- **GraphQL** - Use Apollo Client for data fetching
- **React Router DOM** - For navigation between pages
- **TailwindCSS** - For all styling (no custom CSS unless absolutely necessary)
- **TypeScript** - Use TypeScript for all components, hooks, and utilities

## Component Structure
- Create reusable components in `src/components/`
- Separate UI components (`ui/`), layout components (`layout/`), and feature components (`features/`)
- Use proper TypeScript interfaces for all props
- Implement proper error boundaries and loading states

## Character List Requirements
- Display characters in responsive card grid using CSS Grid
- Each card must show: name, image, species
- Implement sorting by name (A-Z / Z-A) with toggle button
- Use proper loading states and error handling
- Make cards clickable to navigate to detail view

## Character Detail Requirements
- Show full character information when card is clicked
- Include large image, all character data (status, gender, origin, etc.)
- Implement favorite functionality with heart icon
- Add back navigation to character list
- Use proper responsive design

## Favorites System
- Store favorites in localStorage
- Implement heart icon toggle (empty/filled)
- Create favorites page to show only favorited characters
- Use custom hook for favorites management

## Comments System
- Allow users to add comments to characters
- Store comments in localStorage (or implement GraphQL mutations if backend supports)
- Display comments below character details
- Implement comment form with proper validation

## Responsive Design
- Use CSS Grid and Flexbox for layouts
- Implement mobile-first responsive design
- Ensure proper spacing and typography on all screen sizes
- Use TailwindCSS responsive utilities (sm:, md:, lg:, xl:)

## Styling Guidelines
- Use TailwindCSS for ALL styling
- Create custom utility classes in `@layer components` if needed
- Use consistent color scheme and spacing
- Implement hover effects and transitions
- Ensure accessibility with proper contrast and focus states

## Code Quality
- Use TypeScript for all files
- Implement proper error handling
- Use React hooks appropriately
- Follow React best practices
- Write clean, readable, and maintainable code

## Optional Features (Implement if time allows)
- **Soft Delete**: Add delete functionality that hides characters without removing them
- **Advanced Search**: Implement filters for Status, Species, and Gender
- **Unit Tests**: Write tests for at least 3 components using React Testing Library
- **Performance**: Implement proper memoization and optimization

## File Organization
```
src/
├── components/
│   ├── ui/           # Basic UI components (Button, Card, etc.)
│   ├── layout/       # Layout components (Header, Layout, etc.)
│   └── features/     # Feature-specific components (CharacterCard, etc.)
├── pages/            # Page components
├── hooks/            # Custom hooks
├── types/            # TypeScript type definitions
├── utils/            # Utility functions
├── services/         # API/GraphQL services
└── styles/           # Global styles
```

## Development Workflow
- Start with basic character list and cards
- Add sorting functionality
- Implement character detail page
- Add favorites system
- Implement comments feature
- Add responsive design improvements
- Implement optional features if time permits

## Backend Integration
- Only modify backend if absolutely necessary for frontend features
- Use existing GraphQL schema and resolvers
- Implement proper error handling for API calls
- Use Apollo Client cache effectively
